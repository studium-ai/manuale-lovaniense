[{"name":"app.R","content":"#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    https://shiny.posit.co/\n#\n\nlibrary(shiny)\nlibrary(dplyr)\nlibrary(magrittr)\nlibrary(dplyr)\nlibrary(readr)\nlibrary(plotly)\n\nml_records = read_csv('/Users/ghum-m-ae231206/odis-exporter/2024-01-16_ml_sources_table.csv')\n\n\nml_records %>% \n  group_by(y1, format) %>% \n  summarise(n = n()) %>%\n  filter(y1 %in% 1450:1800) %>% \n  ggplot() + geom_col(aes(y1, n, fill = format))\n\n# Define UI for application that draws a histogram\nui <- fluidPage(\n\n    # Application title\n    titlePanel(\"Old Faithful Geyser Data\"),\n\n    # Sidebar with a slider input for number of bins \n    sidebarLayout(\n        sidebarPanel(\n            sliderInput(\"bins\",\n                        \"Number of bins:\",\n                        min = 1400,\n                        max = 1800,\n                        value = c(1400,1800))\n        ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n           plotOutput(\"distPlot\")\n        )\n    )\n)\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n\n    output$distPlot <- renderPlot({\n      \n      \n      ml_records %>% filter(y1 >= input$bins[1]  & y1 <= input$bins[2]) %>% \n        group_by(y1, format) %>% \n        summarise(n = n()) %>%\n        filter(y1 %in% 1450:1800) %>% \n        ggplot() + geom_col(aes(y1, n, fill = format))\n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n","type":"text"}]
